# Task ID: 7
# Title: Develop Simple Module Loader System
# Status: pending
# Dependencies: 5
# Priority: high
# Description: Create a simple module loader (module_loader.sh) to discover and load modules from core and user directories using basic Bash file discovery.
# Details:
Implement simple module discovery using Bash globbing to find .sh files in modules/core/ and modules/user/. Use basic sourcing without complex registry or metadata. Ensure backward compatibility with existing modules. Remove hot-reloading complexity - simple restart is more reliable. Document basic module interface requirements (run_<module>() function).

# Test Strategy:
Test module discovery and loading from both directories. Validate that modules with run_<module>() functions are properly loaded and executable.

# Subtasks:
## 1. Implement Simple Module Discovery Logic [pending]
### Dependencies: None
### Description: Develop basic logic to discover .sh files in modules/core/ and modules/user/ directories using Bash globbing.
### Details:
Use simple 'for file in modules/core/*.sh modules/user/*.sh' pattern to discover modules. No complex monitoring or FileSystemWatcher needed - simple directory scanning on startup.

## 2. Load Modules Using Simple Sourcing [pending]
### Dependencies: 7.1
### Description: Enable the system to load discovered modules using basic Bash source command with error handling.
### Details:
Use 'source' command to load each discovered .sh file. Add basic error handling for failed loads but avoid complex unloading mechanisms.

## 3. Remove Complex Registry Requirements [pending]
### Dependencies: 7.5
### Description: Eliminate in-memory registry complexity in favor of simple function existence checks.
### Details:
Instead of maintaining complex metadata registry, use simple 'type -t run_<module>' checks to verify module functions are available after loading.

## 4. Ensure Backward Compatibility [pending]
### Dependencies: 7.7
### Description: Implement mechanisms to ensure new module loader changes do not break compatibility with existing modules.
### Details:
Maintain simple module interface contract: modules must provide run_<module_name>() function. No complex shims needed - keep interface simple.

## 5. Remove Hot-Reloading Complexity [pending]
### Dependencies: 7.7
### Description: Eliminate hot-reloading feature in favor of simple restart approach for development.
### Details:
Remove complex file monitoring and in-place reloading. For development, simple script restart is more reliable and easier to understand.

## 6. Document Simple Module Interface [pending]
### Dependencies: 7.3
### Description: Create clear documentation for the basic module interface requirements.
### Details:
Document that modules must: 1) Be .sh files in modules/core/ or modules/user/, 2) Provide run_<module_name>() function, 3) Handle their own error reporting. Keep examples simple.

## 7. Test Simple Module Loader [pending]
### Dependencies: 7.5, 7.7, 7.3, 7.8, 7.9
### Description: Develop and execute tests to validate the simplified module loader with core and user modules.
### Details:
Write focused tests covering discovery, loading, and function availability. Test both core and user modules. Ensure robust error handling for missing or invalid modules.

