{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Project Repository and Directory Structure",
        "description": "Set up the upKep project repository with the prescribed modular directory structure, including scripts, modules, core, helpers, config, tests, docs, and examples directories.",
        "details": "Use Git for version control. Create the directory structure as specified in the PRD. Add a .gitignore file to exclude logs, state files, and build artifacts. Initialize a Makefile for build, test, and clean commands. Use shellcheck for linting shell scripts (latest version).",
        "testStrategy": "Verify directory structure, .gitignore, and Makefile presence. Run 'make run', 'make build', 'make test', and 'make clean' to ensure basic workflow is functional.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Develop YAML-Based Configuration Management",
        "description": "Implement YAML configuration files for global and module-specific settings, with validation and migration tools.",
        "status": "in-progress",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "Use yq (latest version) for YAML parsing. Store configs in ~/.upkep/config.yaml. Support environment-specific configs. Implement interactive config management (dialog or whiptail). Provide migration scripts for config upgrades. Secure sensitive settings (chmod 600).",
        "testStrategy": "Test config parsing, validation, and migration. Validate interactive config editing and environment switching. Ensure proper integration with main.sh and other modules.",
        "subtasks": [
          {
            "id": 1,
            "title": "YAML Configuration System Implementation",
            "description": "Core YAML configuration system implemented in scripts/core/config.sh with schema definitions",
            "status": "completed",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Basic YAML Parsing and yq Integration",
            "description": "Implemented grep-based parsing approach and yq integration for advanced YAML/JSON conversion",
            "status": "completed",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Module-specific Configuration Support",
            "description": "Added support for module-specific configurations with validation using yamllint",
            "status": "completed",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Export Functions for JSON/YAML Conversion",
            "description": "Implemented functions to convert between JSON and YAML formats",
            "status": "completed",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Fix Integration with Main Application",
            "description": "Update main.sh to source config.sh and use get_global_config/get_module_config functions instead of hardcoded values",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-22T04:40:54.889Z>\nSuccessfully completed integration with main application:\n\n1. Updated main.sh to source config.sh at the beginning\n2. Added init_config() call to initialize the configuration system\n3. Replaced hardcoded UPDATE_INTERVAL_DAYS and CLEANUP_INTERVAL_DAYS with calls to get_global_config()\n4. Fixed module source paths to point to correct locations (scripts/modules/core/)\n5. Enhanced get_global_config() and get_module_config() functions to use yq for proper YAML parsing of nested keys\n6. Added comprehensive argument handling with --help, --version, --config, --status, --force, and --dry-run options\n7. Added support for --force to bypass interval checks\n8. Added support for --dry-run to show what would be executed without actually running operations\n\nThe script now properly integrates with the YAML configuration system and provides a much better user experience with proper command-line argument handling.\n</info added on 2025-07-22T04:40:54.889Z>",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Implement Interactive Config Management",
            "description": "Create dialog/whiptail based interactive config editing and setup wizard for new users",
            "status": "deferred",
            "dependencies": [],
            "details": "<info added on 2025-07-22T05:38:30.733Z>\n**IMPLEMENTATION COMPLETED WITH KNOWN ISSUES - NEEDS REVISITING**\n\nSuccessfully implemented interactive configuration management with significant UX improvements, but several critical issues remain:\n\n**COMPLETED FEATURES:**\n1. **Comprehensive Interactive Configuration System**:\n   - Added interactive_config() function with dialog/whiptail detection\n   - Created interactive_global_config() with menu-driven navigation\n   - Implemented interactive_module_config() for module-specific settings\n   - Built interactive_setup_wizard() for new user onboarding\n\n2. **Enhanced Setup Wizard**:\n   - Step-by-step guided configuration process\n   - Clear explanations of what each setting does\n   - Optional module-specific configuration (clarified as granular control)\n   - Optional logging configuration\n   - Final confirmation before saving\n   - Proper cancellation handling\n\n3. **Command-Line Integration**:\n   - Added --setup, --config-edit, and --module-config options to main.sh\n   - Integrated with existing help system\n   - Proper exit codes and error handling\n\n**CRITICAL ISSUES THAT NEED REVISITING:**\n\n1. **Dialog Sizing Problems**:\n   - Still getting \"sub-window\" errors despite multiple sizing adjustments\n   - \"Expected 2 arguments, but...\" errors in dialog calls\n   - Module selection interface has formatting issues\n   - Black areas in module selection menus\n\n2. **Configuration Persistence Issues**:\n   - Interval changes not being saved properly\n   - Setup wizard shows original values instead of newly saved intervals\n   - Configuration file updates not persisting between sessions\n\n3. **Navigation Missing**:\n   - No back/previous functionality in any of the interactive menus\n   - Users can't navigate back to previous screens\n   - No clear way to cancel and return to previous menu\n\n4. **Technical Debt**:\n   - Dialog sizing needs systematic approach rather than trial-and-error\n   - Configuration file handling needs better error checking\n   - Need to implement proper state management for interactive sessions\n\n**RECOMMENDATIONS FOR REVISITING:**\n- Implement proper terminal size detection and dynamic dialog sizing\n- Add comprehensive error handling for configuration file operations\n- Implement proper navigation stack for interactive menus\n- Add configuration validation and persistence testing\n- Consider alternative UI approaches if dialog continues to be problematic\n\n**STATUS:** Task 2.6 is functionally complete but has critical UX issues that prevent it from being production-ready. The core functionality works but the user experience is poor due to dialog sizing and navigation problems.\n</info added on 2025-07-22T05:38:30.733Z>\n<info added on 2025-07-22T06:41:44.139Z>\n**Current Status: Simplified text-based configuration implemented but issues persist**\n\n**Issues Found in Simplified Configuration:**\n\n1. **Update Intervals Function:**\n   - ✅ Removed day range limits (1-30, 1-7) - now accepts any positive number\n   - ✅ Changed default cleanup interval from 3 to 30 days\n   - ❌ **CHANGES NOT PERSISTING** - Configuration values are not being saved to the config file\n\n2. **Global Settings Function:**\n   - ❌ **Inconsistent input format** - Defaults show as \"true\"/\"false\" but prompts ask for \"y\"/\"n\"\n   - Need to either change defaults to show \"y\"/\"n\" or change prompts to ask for \"true\"/\"false\"\n\n3. **Save/Quit Functionality:**\n   - ❌ **Menu loop not breaking** - Both \"save and exit\" and \"quit without saving\" return to the configuration menu instead of exiting\n   - Changed from `return 0` to `break` but issue persists\n\n**Technical Investigation Needed:**\n- Check if `set_global_config` function is working properly\n- Verify YAML file writing permissions and paths\n- Debug why the while loop isn't breaking on save/quit\n- Test configuration persistence with manual file inspection\n\n**Next Steps:**\n- Debug configuration persistence issue (highest priority)\n- Fix save/quit menu loop\n- Standardize true/false vs y/n input format\n- Test with actual file system operations\n</info added on 2025-07-22T06:41:44.139Z>",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Implement Secure Settings Handling",
            "description": "Add chmod 600 for sensitive config files and implement encryption for sensitive settings",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-22T06:48:11.623Z>\n**Current Status Analysis:**\n- Main config file (~/.upkep/config.yaml) already has proper 600 permissions (rw-------) \n- Module files have proper 600 permissions but some are corrupted from previous interactive config attempts\n- Need to implement secure file creation, encryption for sensitive settings, and proper permission management\n\n**Implementation Plan:**\n1. Clean up corrupted module files\n   - Identify and remove corrupted module configuration files\n   - Create backup of salvageable data\n   - Implement validation checks to prevent future corruption\n\n2. Add secure file creation functions with proper permissions\n   - Create `secure_file_create()` function that sets 600 permissions by default\n   - Add umask handling to ensure proper permissions during file creation\n   - Implement atomic file operations to prevent partial writes\n\n3. Implement encryption for sensitive settings\n   - Use OpenSSL for symmetric encryption of sensitive values\n   - Store encryption keys securely using system keyring if available\n   - Implement transparent decryption for authorized access\n\n4. Add permission validation and repair functions\n   - Create `validate_file_permissions()` to check existing files\n   - Implement `repair_permissions()` to fix any incorrect permissions\n   - Add logging for permission changes and security warnings\n\n5. Update existing config functions to use secure methods\n   - Modify YAML parsing functions to handle encrypted values\n   - Update config writing functions to use secure file creation\n   - Add permission checks before reading sensitive files\n</info added on 2025-07-22T06:48:11.623Z>\n<info added on 2025-07-22T06:53:55.948Z>\n**IMPLEMENTATION COMPLETED SUCCESSFULLY**\n\n**Completed Features:**\n\n1. **Secure File Creation System:**\n   - Implemented `secure_file_create()` function with atomic writes and proper permissions\n   - Added automatic directory creation with 700 permissions\n   - Integrated with existing config functions\n\n2. **Permission Validation and Repair:**\n   - Added `validate_file_permissions()` to check file permissions\n   - Implemented `repair_permissions()` to fix incorrect permissions\n   - Created `validate_all_config_permissions()` for comprehensive validation\n   - Fixed glob pattern issues with find command\n\n3. **Encryption for Sensitive Settings:**\n   - Implemented `encrypt_sensitive_value()` using OpenSSL AES-256-CBC\n   - Added `decrypt_sensitive_value()` for transparent decryption\n   - Created `set_sensitive_config()` and `get_sensitive_config()` functions\n   - Automatic encryption key generation with secure storage\n\n4. **Secure Initialization:**\n   - Implemented `secure_init_config()` with comprehensive permission validation\n   - Updated `init_config()` to use secure initialization\n   - Updated `set_module_config()` to use secure file creation\n   - Enhanced `set_global_config()` with better error handling\n\n**Testing Results:**\n- ✅ Secure file creation works with proper 600 permissions\n- ✅ Permission validation and repair functions work correctly\n- ✅ Encryption/decryption of sensitive values works properly\n- ✅ Integration with main.sh is seamless\n- ✅ Module configuration files are created securely\n\n**Security Features:**\n- All config files have 600 permissions (user read/write only)\n- All directories have 700 permissions (user read/write/execute only)\n- Sensitive values are encrypted using OpenSSL AES-256-CBC\n- Encryption keys are stored securely with 600 permissions\n- Atomic file operations prevent partial writes\n- Comprehensive permission validation on startup\n</info added on 2025-07-22T06:53:55.948Z>\n<info added on 2025-07-22T06:57:43.569Z>\n**REFACTORING COMPLETED: SIMPLIFIED SECURE SETTINGS**\n\n**Refactoring Summary:**\n- Removed all encryption-related functionality as it was unnecessary for this use case\n- Retained and enhanced practical security features (file permissions, atomic writes)\n- Added new validation and backup/restore capabilities\n\n**Changes Made:**\n\n1. **Removed Encryption Components:**\n   - Removed `encrypt_sensitive_value()` and `decrypt_sensitive_value()`\n   - Removed `set_sensitive_config()` and `get_sensitive_config()`\n   - Removed encryption key generation and storage code\n   - Simplified config reading/writing functions\n\n2. **Enhanced Practical Security:**\n   - Retained 600 permissions for all config files\n   - Kept 700 permissions for config directories\n   - Maintained atomic file operations to prevent corruption\n   - Preserved permission validation and repair functions\n\n3. **Added Config Validation:**\n   - Implemented `validate_config_schema()` to check config structure\n   - Added type checking for critical configuration values\n   - Created `validate_module_configs()` to verify module-specific settings\n   - Added warning system for deprecated or invalid settings\n\n4. **Added Backup/Restore:**\n   - Implemented `backup_config()` with timestamped archives\n   - Added `restore_config()` with validation before restoration\n   - Created automatic backup before significant changes\n   - Added rotation of old backups (keeping last 5)\n\n**Testing Results:**\n- ✅ All config files maintain proper 600 permissions\n- ✅ Config validation correctly identifies malformed settings\n- ✅ Backup/restore functions work properly\n- ✅ Integration with main.sh remains seamless\n- ✅ Performance improved by removing unnecessary encryption\n\n**Conclusion:**\nSecurity has been simplified to focus on practical measures appropriate for this system maintenance tool. The refactored implementation provides better performance and maintainability while still protecting configuration files through proper file permissions and validation.\n</info added on 2025-07-22T06:57:43.569Z>",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Create Migration Scripts",
            "description": "Develop scripts for config upgrades between versions with version tracking in config files",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-22T18:09:29.075Z>\nMigration system implementation completed successfully.\n\nImplemented features:\n- Version tracking added to config files with automatic detection.\n- Complete migration framework developed, supporting migration script discovery, execution, version comparison, upgrade path detection, backup creation before migrations, migration history tracking with timestamps, and robust error handling with rollback.\n- Migration script for upgrading from version 1.0.0 to 2.0.0 created, including backup, structure update, addition of new sections (security_interval, dry_run, parallel_execution), module configuration updates, and post-migration validation.\n- Integrated migration commands into the main application: `--migrate` to run migrations, `--migration-history` to view history, and automatic migration checking in the main function.\n\nKey features:\n- Automatic backup before migrations\n- JSON-based migration history tracking\n- Version-aware migration scripts for targeted upgrades\n- Error handling with exit codes and logging\n- Non-destructive migrations with backup and rollback\n\nTesting:\n- Verified successful migration from 1.0.0 to 2.0.0\n- Confirmed migration history recording\n- No infinite loops or hanging\n- Proper exit after migration\n- Normal operation unaffected by migration system\n\nThe migration system is production-ready and supports future upgrades by adding new migration scripts.\n</info added on 2025-07-22T18:09:29.075Z>",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Add Environment-specific Configs",
            "description": "Implement support for different environments (dev, staging, prod) with environment variable overrides and config inheritance",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "Enhance YAML Parsing",
            "description": "Replace simple grep parsing with full yq implementation for all operations",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 11,
            "title": "Add Config Validation on Startup",
            "description": "Implement validation checks when application starts to ensure config integrity",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 12,
            "title": "Implement Config Backup System",
            "description": "Add automatic config backup before making changes to prevent data loss",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement State Management and Persistence",
        "description": "Develop state management (state.sh) to track last run timestamps, execution metrics, and support state validation and recovery.",
        "status": "in-progress",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Store state in ~/.upkep/state.json using jq for JSON manipulation (latest stable version). Implement atomic writes and backup/restore for state file. Add validation and recovery logic for corrupted state. Track per-module and per-operation metrics.",
        "testStrategy": "Test state read/write, validation, and recovery from corrupted files. Simulate concurrent access and verify atomicity.",
        "subtasks": [
          {
            "id": 1,
            "title": "Advanced state management implementation",
            "description": "Implement advanced state management in scripts/core/state.sh with JSON storage, atomic writes, backup/restore, validation, and metrics tracking.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Fix integration with main application",
            "description": "Update main.sh to source scripts/core/state.sh instead of scripts/modules/core/state.sh and replace simple state management calls with advanced ones.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create compatibility layer",
            "description": "Implement compatibility layer in advanced state.sh to ensure smooth transition from simple to advanced state management.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Update module state tracking",
            "description": "Modify modules to use update_module_state function instead of direct variable updates for state tracking.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Test with existing modules",
            "description": "Verify that all existing modules work correctly with the advanced state management system.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Remove simple state.sh",
            "description": "Once migration is complete and tested, remove the simple state.sh implementation.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Optional: Add concurrent access protection",
            "description": "Implement file locking to prevent issues with concurrent access to the state file.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Optional: Implement state compression",
            "description": "Add compression capabilities for large state files to improve performance.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Optional: Add state migration between versions",
            "description": "Implement functionality to migrate state data between different versions of the application.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 10,
            "title": "Optional: Enhance state validation",
            "description": "Add schema checking to improve state validation capabilities.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement Comprehensive Logging System",
        "description": "Develop structured logging to ~/.upkep/logs/upkep.log and per-module logs, with log rotation and multiple log levels.",
        "status": "in-progress",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "Enhance the existing basic logging system with advanced features including structured logging levels, log rotation, secure permissions, and audit capabilities. Build upon the current log_message function in scripts/core/utils.sh to create a comprehensive logging framework that supports all required functionality.",
        "testStrategy": "Test log creation, rotation, and level filtering. Validate log content and permissions. Verify audit logging functionality and log file security.",
        "subtasks": [
          {
            "id": 1,
            "title": "Basic Logging Implementation",
            "description": "Implement basic logging function in scripts/core/utils.sh and create log directory structure.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Module Logging Integration",
            "description": "Integrate logging functions with module templates and ensure per-module log files exist.",
            "status": "done",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Log Rotation System",
            "description": "Create logrotate configuration or custom rotation logic to handle log file rotation based on size/time. Implement log compression and archival of old logs.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Enhance Structured Logging Levels",
            "description": "Extend log_message function to support configurable log levels (DEBUG, INFO, WARN, ERROR, AUDIT) and implement log level filtering based on configuration.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement Secure Log Permissions",
            "description": "Ensure all log files are created with proper permissions (chmod 600) and are not world-readable. Implement secure log file creation and directory permissions.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Develop Audit Logging Functionality",
            "description": "Implement AUDIT level logging for compliance purposes with secure audit trail and protection against tampering.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Advanced Logging Features",
            "description": "Add structured logging with JSON format option, log correlation IDs for tracking operations, and centralized log aggregation.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Log Analysis and Monitoring",
            "description": "Implement log file size monitoring, alerts, and basic log analysis capabilities.",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Core CLI Interface with Subcommands",
        "description": "Develop the main CLI entry point (main.sh) supporting subcommands (run, status, config) and options, integrating with the existing CLI framework in scripts/core/cli.sh.",
        "status": "in-progress",
        "dependencies": [
          1
        ],
        "priority": "high",
        "details": "Use Bash 5.1+ for scripting. Implement CLI parsing with getopts or a modern Bash CLI helper (e.g., argbash or shflags). Ensure support for interactive and non-interactive modes. Provide comprehensive help output and error handling for unknown commands. Integrate the existing CLI framework from scripts/core/cli.sh with main.sh to support all implemented subcommands: run, status, config, list-modules, create-module, validate-module.",
        "testStrategy": "Unit test CLI parsing for all subcommands and options. Validate help output and error handling for invalid input. Ensure backward compatibility with existing functionality.",
        "subtasks": [
          {
            "id": 1,
            "title": "Integrate CLI Framework with main.sh",
            "description": "Update main.sh to use the existing CLI framework from scripts/core/cli.sh",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Argument Parsing in main.sh",
            "description": "Add getopts or modern CLI helper integration to main.sh for parsing command-line arguments",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Subcommand Routing and Execution",
            "description": "Implement routing logic in main.sh to handle and execute different subcommands",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Core Subcommand Handlers",
            "description": "Create handlers for run, status, and config subcommands that call existing functionality",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement Interactive Mode",
            "description": "Add interactive mode with user prompts, guided operation selection, and confirmation dialogs",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Add Global CLI Options",
            "description": "Implement --help, --version, --verbose, and --dry-run flags across all subcommands",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Enhance User Feedback",
            "description": "Add progress indicators and improved user feedback for all operations",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Test Backward Compatibility",
            "description": "Ensure all existing functionality continues to work with the new CLI implementation",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 9,
            "title": "Update Documentation",
            "description": "Update help system and documentation to reflect the new CLI structure and options",
            "status": "pending",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Design Visual Feedback and Styled CLI Output",
        "description": "Provide rich CLI output with progress indicators, styled summaries, ASCII art branding, and color-coded statuses.",
        "details": "Use tput and ANSI escape codes for color and formatting. Implement progress spinners and summary boxes. Add ASCII art branding via ascii_art.sh. Support output formats: table (column), JSON, YAML (yq). Ensure accessibility (colorblind-friendly palettes).",
        "testStrategy": "Visual inspection and automated snapshot tests for CLI output. Test accessibility with different terminal themes.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Develop Dynamic Module Loader System",
        "description": "Create a dynamic module loader (module_loader.sh) to auto-discover and load modules from core and user directories at runtime.",
        "details": "Implement module discovery using Bash globbing and source. Maintain an in-memory registry of loaded modules and metadata. Ensure backward compatibility with existing static modules. Support hot-reloading for development. Document module interface requirements.",
        "testStrategy": "Test module discovery, loading, and registry population. Validate backward compatibility with legacy modules.",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Module Discovery Logic",
            "description": "Develop logic to automatically discover available modules in a specified directory or configuration at runtime.",
            "dependencies": [],
            "details": "Use mechanisms such as FileSystemWatcher (for .NET) or directory scanning (for Python/Node.js) to detect new or existing modules. Ensure the logic can handle both initial discovery and ongoing monitoring for new modules.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Load Modules Dynamically at Runtime",
            "description": "Enable the system to load discovered modules into memory as needed during application execution.",
            "dependencies": [
              1
            ],
            "details": "Implement dynamic loading using platform-specific APIs (e.g., Assembly.Load in .NET, importlib in Python, require in Node.js). Ensure proper error handling for failed loads and support for unloading if necessary.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Maintain In-Memory Registry",
            "description": "Create and manage an in-memory registry to track loaded modules and their metadata.",
            "dependencies": [
              5
            ],
            "details": "Design a registry structure that allows efficient lookup, addition, and removal of modules. Store relevant metadata such as module name, version, and status.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Ensure Backward Compatibility",
            "description": "Implement mechanisms to ensure new module loader changes do not break compatibility with existing modules.",
            "dependencies": [
              7
            ],
            "details": "Define and enforce a stable module interface or contract. Provide shims or adapters if necessary to support legacy modules.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Add Hot-Reloading Support",
            "description": "Enable modules to be reloaded at runtime without restarting the application.",
            "dependencies": [
              7
            ],
            "details": "Monitor the module directory for changes and reload affected modules in place. Ensure state consistency and handle potential errors during reloads.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Document Module Interface",
            "description": "Create comprehensive documentation for the expected module interface and integration guidelines.",
            "dependencies": [
              3
            ],
            "details": "Describe required exports, initialization patterns, lifecycle hooks, and compatibility requirements. Include examples for both core and user modules.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Test Module Loader with Core and User Modules",
            "description": "Develop and execute tests to validate the module loader with both built-in and third-party modules.",
            "dependencies": [
              5,
              7,
              3,
              8,
              9
            ],
            "details": "Write unit and integration tests covering discovery, loading, registry management, backward compatibility, and hot-reloading scenarios. Ensure robust error handling and edge case coverage.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Build Package Manager Update Modules (APT, Snap, Flatpak)",
        "description": "Implement core modules for APT, Snap, and Flatpak updates with error handling and reporting.",
        "details": "Create apt_update.sh, snap_update.sh, and flatpak_update.sh in modules/core/. Use robust error handling (set -euo pipefail). Capture and report errors with clear messages. Support dry-run mode. Ensure modules implement run_<module>() interface.",
        "testStrategy": "Test each module for successful updates, error scenarios, and dry-run output. Mock package managers for CI testing.",
        "priority": "high",
        "dependencies": [
          7,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Develop System Cleanup Modules",
        "description": "Implement cleanup modules for apt autoremove, apt clean, and extensible custom cleanup scripts.",
        "details": "Create cleanup.sh in modules/core/. Support additional cleanup operations via user modules. Ensure interface compliance. Allow users to add custom scripts in modules/user/.",
        "testStrategy": "Test cleanup operations, including custom user scripts. Validate error handling and reporting.",
        "priority": "high",
        "dependencies": [
          7,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Interval and Execution Policy Management",
        "description": "Add interval-based execution logic to skip operations within configured intervals and display skip messages.",
        "details": "Store interval settings in YAML config (see Task 10). Use Bash date arithmetic for interval checks. Display clear skip messages with time remaining. Support per-module and per-category intervals. Allow dynamic adjustment based on system state.",
        "testStrategy": "Test interval enforcement, skip logic, and dynamic adjustment. Validate correct messaging for skipped operations.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement interval storage and retrieval from YAML",
            "description": "Develop functionality to store interval data in a YAML file and retrieve it within the script, ensuring compatibility with Bash parsing tools.",
            "dependencies": [],
            "details": "Use tools like yq or custom Bash functions to read and write interval values for modules/categories from a YAML configuration file.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Add Bash date arithmetic for interval checks",
            "description": "Integrate Bash date arithmetic to calculate and compare time intervals for each module/category based on the retrieved YAML data.",
            "dependencies": [
              1
            ],
            "details": "Utilize Bash date commands (e.g., date, expr) to determine if the required interval has elapsed since the last execution for each module/category.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Display skip messages with time remaining",
            "description": "Implement logic to display informative skip messages, including the time remaining until the next allowed execution for each module/category.",
            "dependencies": [
              5
            ],
            "details": "Calculate the remaining time using Bash arithmetic and output user-friendly messages when a module/category is skipped due to interval constraints.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Support per-module/category intervals",
            "description": "Extend the interval logic to handle distinct intervals for each module or category, as defined in the YAML configuration.",
            "dependencies": [
              1,
              5,
              7
            ],
            "details": "Ensure the script can read and apply different interval values for each module/category, allowing for granular control.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Enable dynamic adjustment based on system state",
            "description": "Add functionality to dynamically adjust interval values or skip logic based on current system state or runtime conditions.",
            "dependencies": [
              1,
              5,
              7,
              3
            ],
            "details": "Incorporate checks for system metrics or external signals to modify interval enforcement or execution behavior in real time.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 11,
        "title": "Enable Modular Architecture and User Module Support",
        "description": "Support dynamic loading, validation, and sharing of user-created modules with a simple interface and optional sharing mechanisms.",
        "details": "Document module interface (run_<module_name>()). Implement module validation (structure, permissions). Provide guided module creation tool (dialog/whiptail). Support sharing via GitHub Gist (curl API). Add basic security scanning for shared modules (shellcheck, regex checks).",
        "testStrategy": "Test user module loading, validation, and sharing. Validate security scanning and guided creation flow.",
        "priority": "medium",
        "dependencies": [
          7,
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Document Module Interface",
            "description": "Define and document the expected structure, required methods, and properties for modules to ensure consistency and interoperability.",
            "dependencies": [],
            "details": "Specify interface requirements such as initializer/finalizer functions, public/private members, and usage guidelines.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Module Validation",
            "description": "Develop logic to validate that modules conform to the documented interface and structural requirements.",
            "dependencies": [
              1
            ],
            "details": "Create validation routines that check for required functions, properties, and correct initialization/finalization patterns.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Guided Module Creation Tool",
            "description": "Build a user-facing tool that assists users in creating new modules following the documented interface and validation rules.",
            "dependencies": [
              1,
              5
            ],
            "details": "Provide step-by-step guidance, templates, and real-time validation feedback during module creation.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Support Module Sharing via GitHub Gist",
            "description": "Enable users to share modules by exporting and importing them through GitHub Gist integration.",
            "dependencies": [
              1,
              5,
              7
            ],
            "details": "Implement authentication, gist creation, and retrieval workflows for seamless sharing and loading of modules.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Integrate Security Scanning",
            "description": "Incorporate automated security scanning to detect vulnerabilities or malicious code in user modules before loading or sharing.",
            "dependencies": [
              5,
              3
            ],
            "details": "Leverage static analysis tools or third-party APIs to scan module code and report issues to users.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Test User Module Loading",
            "description": "Develop and execute tests to ensure modules can be dynamically loaded, validated, and initialized correctly in the application.",
            "dependencies": [
              5,
              8
            ],
            "details": "Test various scenarios including valid, invalid, and malicious modules to verify robustness and security.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Validate Sharing and Creation Flows",
            "description": "Perform end-to-end testing of module creation and sharing workflows to ensure usability, correctness, and security.",
            "dependencies": [
              7,
              3,
              8,
              9
            ],
            "details": "Simulate user journeys from module creation to sharing and loading, verifying all validation and security checks are enforced.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 12,
        "title": "Implement Robust Error Handling and Recovery",
        "description": "Add comprehensive error handling, retry mechanisms, rollback, and diagnostics for all operations and modules.",
        "details": "Standardize error reporting across modules. Implement automatic retries for transient errors (with exponential backoff). Add rollback logic for failed operations (where feasible). Provide detailed diagnostics and error classification. Support state recovery from errors.",
        "testStrategy": "Simulate failures and verify error handling, retries, and rollback. Check diagnostic output and state recovery.",
        "priority": "high",
        "dependencies": [
          8,
          9,
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Standardize Error Reporting",
            "description": "Define and implement a consistent format for error messages and logs across the system.",
            "dependencies": [],
            "details": "Establish error codes, message structures, and logging conventions to ensure all errors are reported in a uniform and descriptive manner.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Retry Logic with Backoff",
            "description": "Develop mechanisms to automatically retry failed operations using exponential backoff strategies.",
            "dependencies": [
              1
            ],
            "details": "Integrate retry logic into critical workflows, ensuring retries are logged and respect system limits to avoid cascading failures.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Rollback Mechanisms",
            "description": "Introduce rollback procedures to revert system state in case of unrecoverable errors.",
            "dependencies": [
              5
            ],
            "details": "Design and implement transactional or compensating actions to restore previous state when operations fail after partial completion.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Provide Diagnostics and Error Classification",
            "description": "Enhance error handling with detailed diagnostics and categorize errors for easier troubleshooting.",
            "dependencies": [
              1
            ],
            "details": "Capture stack traces, context, and metadata for each error; classify errors by type, severity, and recoverability.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Integrate with State Recovery",
            "description": "Ensure error handling mechanisms interact correctly with state management and recovery processes.",
            "dependencies": [
              7,
              3
            ],
            "details": "Coordinate rollback and retry logic with state recovery modules to maintain data consistency and system reliability.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Test Error Scenarios",
            "description": "Develop and execute tests to simulate various error conditions and validate error handling behavior.",
            "dependencies": [
              8
            ],
            "details": "Create unit, integration, and end-to-end tests covering common and edge-case failures, including retries and rollbacks.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Validate Rollback",
            "description": "Verify that rollback mechanisms correctly restore system state after failures.",
            "dependencies": [],
            "details": "Test rollback logic under different failure scenarios to ensure no residual side effects or data inconsistencies remain.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Document Error Handling Patterns",
            "description": "Create comprehensive documentation outlining error handling strategies, patterns, and usage guidelines.",
            "dependencies": [],
            "details": "Detail standardized error reporting, retry and rollback logic, diagnostics, and integration points for future maintainability.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 13,
        "title": "Optimize Performance and Resource Management",
        "description": "Implement performance optimizations, parallel execution of independent modules, and resource monitoring/throttling.",
        "details": "Use Bash job control (&, wait) for parallel execution where safe. Monitor resource usage with /proc and ps. Throttle operations if system load is high. Cache module metadata for faster loading. Profile execution time and memory usage. Document performance metrics.",
        "testStrategy": "Benchmark full runs, measure resource usage, and validate parallel execution. Test throttling under load.",
        "priority": "medium",
        "dependencies": [
          7,
          8,
          9,
          10
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Parallel Execution",
            "description": "Design and develop the system to support concurrent execution of tasks or processes, ensuring thread/process safety and minimizing contention.",
            "dependencies": [],
            "details": "Select appropriate parallelization strategies and frameworks (e.g., thread pools, parallel loops). Ensure tasks are independent to avoid race conditions and shared state issues. Optimize the granularity of parallelism to balance overhead and performance.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Monitor Resource Usage",
            "description": "Integrate monitoring tools to track CPU, memory, and I/O usage during parallel execution.",
            "dependencies": [
              1
            ],
            "details": "Implement resource monitoring at both system and application levels. Collect metrics such as CPU utilization, memory consumption, and disk/network I/O. Ensure monitoring does not introduce significant overhead.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Throttling Logic",
            "description": "Develop mechanisms to limit the number of concurrent tasks based on available resources and system thresholds.",
            "dependencies": [
              5
            ],
            "details": "Use resource usage data to dynamically adjust the degree of parallelism. Implement logic to queue or delay tasks when resource limits are approached, preventing system overload.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Cache Module Metadata",
            "description": "Implement a caching layer for frequently accessed module metadata to reduce redundant computation and improve performance.",
            "dependencies": [
              1
            ],
            "details": "Design cache invalidation and consistency strategies. Choose appropriate cache storage (in-memory, distributed, etc.) and ensure thread-safe access in parallel environments.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Profile Execution Time and Memory",
            "description": "Instrument the system to collect detailed timing and memory usage data for each parallel task.",
            "dependencies": [
              1
            ],
            "details": "Use profiling tools or custom instrumentation to measure execution time and memory footprint. Aggregate and store profiling data for analysis.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Document Performance Metrics",
            "description": "Create comprehensive documentation of all collected performance metrics, including resource usage, execution times, and cache hit rates.",
            "dependencies": [
              5,
              8
            ],
            "details": "Summarize key findings, provide visualizations (charts, tables), and explain the impact of parallelism and caching on performance. Ensure documentation is accessible and up-to-date.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Test Under Load",
            "description": "Conduct load testing to evaluate system behavior and stability under high concurrency and resource utilization.",
            "dependencies": [
              7,
              3,
              8
            ],
            "details": "Simulate realistic and peak workloads. Monitor for bottlenecks, failures, and performance degradation. Use results to refine throttling, caching, and parallel execution strategies.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 14,
        "title": "Develop Test Suite and Continuous Integration",
        "description": "Create a comprehensive test suite (unit, integration, visual) and set up CI for automated testing and code quality checks.",
        "details": "Use Bats (Bash Automated Testing System, latest version) for unit/integration tests. Add visual output checks (compare snapshots). Integrate shellcheck and shfmt for linting/formatting. Set up GitHub Actions or GitLab CI for automated runs. Mock system commands for safe testing.",
        "testStrategy": "Run all tests in CI. Validate coverage, linting, and visual output. Ensure tests pass on multiple Linux distros.",
        "priority": "high",
        "dependencies": [
          8,
          9,
          6,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Write Documentation and Usage Examples",
        "description": "Produce comprehensive documentation, including API docs, module development guides, and usage examples.",
        "details": "Use Markdown for docs. Cover CLI usage, configuration, module creation, troubleshooting, and contribution guidelines. Provide example modules and configurations. Generate man pages with help2man. Ensure docs are accessible and up-to-date.",
        "testStrategy": "Manual review and automated link checks. Validate examples by running them as tests.",
        "priority": "medium",
        "dependencies": [
          5,
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Implement Comprehensive Linting System",
        "description": "Implement a comprehensive linting system for the upKep project with standard rules including 300 LOC limit per file, shell script best practices, and automated validation.",
        "details": "Create a robust linting system for the upKep project to ensure code quality and consistency:\n\n1. Select and integrate ShellCheck (v0.8.0+) as the primary linting tool for shell script validation.\n2. Implement additional custom linting rules using awk/grep:\n   - Enforce 300 lines of code maximum per file\n   - Verify proper shebang lines (#!/usr/bin/env bash)\n   - Check for required header comments and license information\n   - Validate function naming conventions (snake_case)\n   - Ensure proper error handling with set -e or trap statements\n\n3. Create a dedicated lint.sh script in scripts/tools/ that:\n   - Runs all linting checks on specified files or the entire codebase\n   - Provides clear, actionable error messages with line numbers\n   - Supports auto-fixing common issues where possible\n   - Includes a --strict mode for CI/CD pipelines\n\n4. Configure integration with common editors (VS Code, Vim, etc.) via .editorconfig and tool-specific config files.\n\n5. Add pre-commit hook template in scripts/tools/hooks/ that runs linting before commits.\n\n6. Create documentation in docs/development/linting.md explaining:\n   - All linting rules with examples of good/bad code\n   - How to run linting manually\n   - How to set up editor integration\n   - How to add custom rules\n\n7. Implement a GitHub Actions workflow (.github/workflows/lint.yml) to run linting on all PRs.\n\n8. Add configuration files:\n   - .shellcheckrc for ShellCheck configuration\n   - .lintr for custom linting rules\n   - .editorconfig for editor settings\n\n9. Ensure all existing code passes the new linting rules or document necessary exceptions.",
        "testStrategy": "1. Unit Testing:\n   - Create test files that intentionally violate each linting rule\n   - Verify that the linting system correctly identifies all violations\n   - Test the auto-fix functionality for rules that support it\n\n2. Integration Testing:\n   - Run the linting system against the entire codebase\n   - Verify that the output is properly formatted and actionable\n   - Test the pre-commit hook with both valid and invalid changes\n\n3. CI/CD Testing:\n   - Configure a test GitHub Actions workflow\n   - Verify that PRs with linting violations are properly flagged\n   - Test that the workflow succeeds with compliant code\n\n4. Performance Testing:\n   - Measure execution time on the full codebase\n   - Ensure linting completes in a reasonable time (< 30 seconds)\n   - Test with incremental linting to verify only changed files are checked\n\n5. Documentation Testing:\n   - Verify that all linting rules are properly documented\n   - Test that the documentation examples accurately reflect the implemented rules\n   - Ensure editor integration instructions work across different environments",
        "status": "done",
        "dependencies": [
          1,
          5,
          7
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Fix Remaining Linting Issues",
        "description": "Address all remaining linting issues identified by the enhanced linter, including line count violations, shebang violations, permission warnings, and ShellCheck issues.",
        "details": "This task involves systematically addressing all remaining linting issues identified by the enhanced linter:\n\n1. **Refactor Large Core Files**:\n   - Break down large core files (cli.sh, prompt_generator.sh, state.sh, utils.sh) that exceed 300 lines of code\n   - Extract logical groups of functions into separate module files\n   - Ensure proper imports and dependencies between the new modules\n   - Maintain backward compatibility with existing function calls\n   - Example refactoring approach for utils.sh:\n     ```bash\n     # Original utils.sh (400+ lines)\n     # Split into:\n     # - utils_logging.sh (logging functions)\n     # - utils_filesystem.sh (file operations)\n     # - utils_validation.sh (input validation)\n     # - utils.sh (core utilities, imports the above)\n     ```\n\n2. **Add Shebangs to Empty Mock Files**:\n   - Identify all empty mock files used for testing\n   - Add proper shebang lines to each file: `#!/usr/bin/env bash`\n   - Ensure consistency across all mock files\n\n3. **Fix File Permissions**:\n   - Set executable files (scripts, test runners) to 755 permissions\n   - Set non-executable files (configs, data files) to 644 permissions\n   - Use `find` and `chmod` to apply permissions systematically:\n     ```bash\n     # For executable files\n     find ./scripts -type f -name \"*.sh\" -exec chmod 755 {} \\;\n     # For non-executable files\n     find ./config -type f -exec chmod 644 {} \\;\n     ```\n\n4. **Address Remaining ShellCheck Issues**:\n   - Run ShellCheck with `--enable=all` to identify all potential issues\n   - Fix any remaining warnings or errors\n   - Document any intentional ShellCheck suppressions with clear comments\n\n5. **Update Linting Documentation**:\n   - Document the refactoring changes in the project's development guide\n   - Update any module dependency diagrams to reflect the new structure\n   - Add comments to explain complex sections of refactored code",
        "testStrategy": "1. **Automated Verification**:\n   - Run the linting system against the entire codebase after each fix\n   - Verify that the number of linting issues decreases after each change\n   - Final run should show zero linting issues\n   - Execute: `./scripts/lint.sh --verbose`\n\n2. **Refactoring Tests**:\n   - For each refactored file, run the existing test suite to ensure functionality is preserved\n   - Create new unit tests for any newly extracted modules\n   - Verify that all functions remain accessible through their original paths\n   - Test command: `./tests/run_all_tests.sh`\n\n3. **Permission Verification**:\n   - Use a script to verify all file permissions match the expected patterns:\n     ```bash\n     find ./scripts -type f -name \"*.sh\" -not -perm 755 | wc -l  # Should be 0\n     find ./config -type f -not -perm 644 | wc -l  # Should be 0\n     ```\n\n4. **ShellCheck Validation**:\n   - Run ShellCheck with strict settings on all shell scripts\n   - Verify zero warnings/errors or only documented suppressions\n   - Command: `shellcheck --enable=all --shell=bash scripts/**/*.sh`\n\n5. **Manual Review**:\n   - Conduct a code review of all refactored files\n   - Ensure logical separation of concerns in the new module structure\n   - Verify that documentation accurately reflects the new organization",
        "status": "pending",
        "dependencies": [
          16
        ],
        "priority": "high",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-21T23:33:05.847Z",
      "updated": "2025-07-22T18:10:45.223Z",
      "description": "Tasks for master context"
    }
  }
}